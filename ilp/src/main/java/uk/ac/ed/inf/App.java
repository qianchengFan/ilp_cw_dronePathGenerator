package uk.ac.ed.inf;


import javax.swing.*;
import java.io.IOException;
import com.mapbox.geojson.*;
import java.io.PrintWriter;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Main class that use input arguments and other class's method to generate the flight path of drone.
 * and store required information in database.
 */
public class App {
    /**
     * The main method that use all required methods from other class and input arguments
     * to generate the flight path output and input required data into database.
     * @param args These input arguments that contains date, database port and website port.
     * @throws SQLException SQLException
     * @throws IOException IOException
     * @throws InterruptedException InterruptedException
     */
    public static void main(String[] args) throws SQLException, IOException, InterruptedException {
        long start = System.nanoTime();//Initialize the start time for calculating execution time.
        if (args.length != 5){//check the input data.
            throw new IllegalArgumentException("The input data is invalid");
        }
        //assign these data with corresponding name.
        String day = args[0];
        String month = args[1];
        String year = args[2];
        String webPort = args[3];
        String databasePort = args[4];

        //generate name of output file.
        String date = year+"-"+month+"-"+day;

        //initialize drone with input data.
        Drone drone = new Drone(webPort,databasePort,date);

        //get no-fly-zone and orderList from website and database.
        ArrayList<Buildings> bL = Buildings.getBuildings();
        ArrayList<Orders> orderList = Parse.getOrderTable();
        Integer orderCount = orderList.size();

        //call the method to generate flight path, the generated path and other information is stored in the drone's variables.
        drone.generateGreedysolution(orderList,bL);

        //The flight path generated by the above method is a list of points, here we convert it to a geojson string.
        String jsonString = (AppUtils.transformPointsToJson(drone.getVisitedPoint()));

        //print the number of delivered orders and the moves the drone left for this flight path, it's for testing purpose.
        Integer deliveredTotal = drone.getDeliveriedTotal();
        Integer moveLeft = drone.getactionLeft();
        System.out.println("This day has "+orderCount+" orders in total");
        System.out.println(deliveredTotal +" orders deliveried, "+moveLeft+" moves left");

        //Output the required geojson file
        String outputFile = "drone-"+day+"-"+month+"-"+year+".geojson";
        PrintWriter output = new PrintWriter(outputFile);
        output.println(jsonString);
        output.close();
        System.out.println("The geojson file "+outputFile+" for the flight path is generated.");//just to show a signal that the file is generated.

        //Then start to deal with database table, first to make sure these tables not already exist.
        Parse.dropDeliveriesTable();
        Parse.dropFlightPath();

        //initialize tables.
        Parse.createDeliveriesTable();
        Parse.createFlightPath();

        //Get required data from drone and insert them to tables.
        ArrayList<Deliveries> deliveriesList = drone.generateDeliveries();
        ArrayList<FlightPath> paths = drone.generateFlightPath();
        Parse.insertToDeliveries(deliveriesList);
        Parse.insertToFlightPath(paths);

        //calculate and print the total execution time, for testing purpose.
        long end = System.nanoTime();
        long totalTime = end - start;
        System.out.println("Total execution time is " + totalTime / 1000000000.0 + " seconds");
    }
}
